<template>


	<!-- #ifdef APP -->
	<scroll-view style="flex:1" :style="{  backgroundColor:bgColorOfView }">
	<!-- #endif -->
	<x-navbar title="Wallpaper" :showNavBack="false">
		<template v-slot:right>
			<x-icon  name="refresh-line" class="mr-10" @click="init"></x-icon>
		</template>
		
	
	</x-navbar>
		<view class="pa-8" >
			<x-waterfall :list-count="list.length" :column="3">
				<x-waterfall-item v-for="(path,index) in list" :order="index" :key="index">
					<template v-slot:default="col">
						<view class="pa-1" :style="{ borderRadius:'6px'}">
							<image @click="viewImage(index)" style="width:100%;height:120px" :src="host+path">
							</image>
						</view>
					</template>
				</x-waterfall-item>
			</x-waterfall>
		</view>

	<!-- #ifdef APP -->
	</scroll-view>
	<!-- #endif -->

</template>

<script lang="uts" setup>
	// 顶部追加（仅 Android 需要的导入）
	/* #ifdef APP-ANDROID */
	import WallpaperManager from 'android.app.WallpaperManager'
	import Build from 'android.os.Build'
	import BitmapFactory from 'android.graphics.BitmapFactory'
	import UTSAndroid from 'io.dcloud.uts.UTSAndroid'
	import Rect from 'android.graphics.Rect'
	import Bitmap from 'android.graphics.Bitmap'
	
	/* #endif */
 
	import { xStore } from "@/uni_modules/tmx-ui/index.uts"
	import { xRequest } from "../../uni_modules/tmx-ui/index.uts";
	import { resultListType } from '../../utils/interface.uts'
 
	import { api ,ImageInfo} from '../../api/api.uts'
	
	const host='https://omessage.ecloudoman.com/prod-api'
	const list = reactive([] as string[]);
	const loading = ref(false);
	const totalPage=ref(0);
	const pageNum=ref(1);
	const pageSize=ref(21)
	xStore.setDarkModel('auto')

	const bgColorOfView = computed(() => { return xStore.xConfig.dark == 'dark' ? xStore.xConfig.sheetDarkColor : 'white' })
	const textColorOfView = computed(() => { return xStore.xConfig.dark == 'dark' ? 'white' : '#333333' })
 


	 // 替换原来的方法：
	 	function handleSetLockScreen(url : string) {
	 		/* #ifdef APP-ANDROID */
	 		setTimeout(()=>{
	 			uni.showLoading({ title: 'Setting...', mask: true })
	 		},300)
	 		console.log('下载图片:',url)
	 		uni.downloadFile({
	 			url,
	 			success: (res : DownloadFileSuccess) => {
	 				console.log("下载成功:",res)
	 				if (res.statusCode !== 200 || res.tempFilePath == null || res.tempFilePath.length == 0) {
	 					uni.hideLoading()
	 					uni.showModal({
	 						title: 'Failed',
	 						content: 'Download error: ' + res.statusCode,
	 						showCancel: false
	 					})
	 					return
	 				}
	 
	 				try {
	 					const ctx = UTSAndroid.getAppContext()
	 					const wm = WallpaperManager.getInstance(ctx)
	 
	 					// 读取位图
	 					const bmp = BitmapFactory.decodeFile(res.tempFilePath)
	 					if (bmp == null) {
	 						throw new Error('Decode bitmap failed')
	 					}
	 
	 					// Android 7.0+ 支持只设置锁屏
	 					if (Build.VERSION.SDK_INT >= 24) {
	 						// 需要：import Rect from 'android.graphics.Rect'
	 						const crop = new Rect(0, 0, bmp.getWidth(), bmp.getHeight())
	 						wm.setBitmap(bmp, crop, true, WallpaperManager.FLAG_LOCK)   // ✅
	 					} else {
	 						// 降级：只能设置系统壁纸
	 						wm.setBitmap(bmp)
	 					}
					 console.log("设置成功")
					 setTimeout(()=>{
						uni.hideLoading()
						uni.showToast({ title: 'Lock screen set', icon: 'success' })
					 },300)
	 					// 释放位图内存
	 					try { bmp.recycle() } catch (_) { }
	 				} catch (e) {
						console.log('设置失败:')
	 					uni.hideLoading()
	 					uni.showModal({
	 						title: 'Failed',
	 						content: '' + e,
	 						showCancel: false
	 					})
	 				}
	 			},
	 			fail: (err) => {
	 				console.log("下载失败")
	 				uni.hideLoading()
	 				uni.showModal({ title: 'Failed', content: '' + err, showCancel: false })
	 			}
	 		})
	 		/* #endif */
	 
	 		/* #ifndef APP-ANDROID */
	 		uni.showModal({
	 			title: 'Not Supported',
	 			content:
	 				'iOS/H5/小程序不允许应用直接设置锁屏。\n请先保存到相册，再在系统设置中设为锁屏壁纸。',
	 			showCancel: false
	 		})
	 		/* #endif */
	 	}
	 function handleSetLockScreen2(url: string) {
		 
		// 轻微延迟，避免 loading 闪一下
		setTimeout(() => {
			uni.showLoading({ title: 'Setting...', mask: true })
		}, 300)
	   /* #ifdef APP-ANDROID */
	   // 获取Android上下文
	   const _ctxMaybe = UTSAndroid.getAppContext()
	   if (_ctxMaybe == null) {
	     uni.showModal({ title: 'Failed', content: 'No Android context', showCancel: false })
	     return
	   }
	   const ctx = _ctxMaybe!  // non-null
	 
	   // 计算 inSampleSize，返回 number；设置时再强制成 Int
	   function computeInSampleSize(srcW: number, srcH: number, reqW: number, reqH: number): number {
	     let inSampleSize = 1
	     if (srcH > reqH || srcW > reqW) {
	       let halfH = srcH / 2
	       let halfW = srcW / 2
	       while ((halfH / inSampleSize) >= reqH && (halfW / inSampleSize) >= reqW) {
	         inSampleSize *= 2
	       }
	     }
	     return inSampleSize < 1 ? 1 : inSampleSize
	   }
	 
	   // 解码并“拉伸到屏幕宽高”（会变形，但铺满）
	   function decodeAndStretchToScreen(path: string): Bitmap {
	       const dm = ctx?.getResources()?.getDisplayMetrics()
	       if (dm == null) throw new Error('Get display metrics failed')
	     const sw = dm.widthPixels
	     const sh = dm.heightPixels
	 
	     // 1) 只读 bounds
	     const optsBounds = new BitmapFactory.Options()
	     optsBounds.inJustDecodeBounds = true
	     BitmapFactory.decodeFile(path, optsBounds)
	     const srcW = optsBounds.outWidth
	     const srcH = optsBounds.outHeight
	     if (srcW <= 0 || srcH <= 0) throw new Error('Decode bounds failed')
	 
	     // 2) 降采样解码
	     const opts = new BitmapFactory.Options()
	     // 用位运算 |0 把 number 强制为 Int，满足 Kotlin/UTS 的 Int 要求
	       opts.inSampleSize = Math.floor(Math.max(1, computeInSampleSize(srcW, srcH, sw, sh))) as Int
	     opts.inPreferredConfig = Bitmap.Config.RGB_565
	     const origin = BitmapFactory.decodeFile(path, opts)
	     if (origin == null) throw new Error('Decode bitmap failed')
	 
	     try {
	       // 3) 拉伸到屏幕尺寸（会变形）
	       const stretched = Bitmap.createScaledBitmap(origin, sw, sh, true)
	       return stretched
	     } finally {
	       try { origin.recycle() } catch (_) {}
	     }
	   }
	 
	   function applyLockScreen(bmp: Bitmap) {
	     const wm = WallpaperManager.getInstance(ctx!)
	     if (Build.VERSION.SDK_INT >= 24) {
	       const crop = new Rect(0, 0, bmp.getWidth(), bmp.getHeight())
	       wm.setBitmap(bmp, crop, true, WallpaperManager.FLAG_LOCK)
	     } else {
	       wm.setBitmap(bmp) // 低版本：只能设置系统壁纸
	     }
	   }

	 
	   uni.downloadFile({
	     url,
	     success: (res: DownloadFileSuccess) => {
	       // 显式判空，避免 “Unresolved reference: !”
	       if (res.statusCode !== 200 || res.tempFilePath == null || res.tempFilePath.length === 0) {
	         uni.hideLoading()
	         uni.showModal({
	           title: 'Failed',
	           content: 'Download error: ' + res.statusCode,
	           showCancel: false
	         })
	         return
	       }
	 
	       try {
	         const stretched = decodeAndStretchToScreen(res.tempFilePath)
	         try {
	           applyLockScreen(stretched)
	           uni.hideLoading()
	           uni.showToast({ title: 'Lock screen set', icon: 'success' })
	         } finally {
	           try { stretched.recycle() } catch (_) {}
	         }
	       } catch (e) {
	         uni.hideLoading()
	         uni.showModal({ title: 'Failed', content: '' + e, showCancel: false })
	       }
	     },
	     fail: (err) => {
	       uni.hideLoading()
	       uni.showModal({ title: 'Failed', content: '' + err, showCancel: false })
	     }
	   })
	   /* #endif */
	 
	   /* #ifndef APP-ANDROID */
	   uni.showModal({
	     title: 'Not Supported',
	     content: 'iOS/H5/小程序不允许应用直接设置锁屏。请先保存到相册，再在系统设置中设为锁屏壁纸。',
	     showCancel: false
	   })
	   /* #endif */
	 }


	function handleSaveToAlbum(url : string) {
		setTimeout(() => {
			uni.showLoading({
				title: "Saving...",
				mask: true
			})
		}, 300);
		uni.downloadFile({
			url,
			success: (res : DownloadFileSuccess) => {
				if (res.statusCode !== 200) {
					uni.hideLoading()
					uni.showModal({ title: 'Failed', content: 'HTTP ' + res.statusCode, showCancel: false })
					return
				}
				const temp = res.tempFilePath
				if (temp == null || temp.length === 0) {
					uni.hideLoading()
					uni.showModal({ title: 'Failed', content: 'tempFilePath is empty', showCancel: false })
					return
				}
				uni.saveImageToPhotosAlbum({
					filePath: temp,
					success: () => {
						uni.hideLoading()
						uni.showToast({ title: 'Saved to Photos', icon: 'success' })
					},
					fail: (err) => {
						uni.hideLoading()
						uni.showModal({ title: 'Failed', content: '' + err, showCancel: false })
					}
				})
			},
			fail: (e) => {
				uni.hideLoading()
				uni.showModal({ title: 'Failed', content: '' + e, showCancel: false })
			}
		})
	}
	 
	function viewImage(index : number) {
		 

		uni.previewImage({
			current: index,
			urls: list.map(x=>host+x),
			longPressActions:{
				itemList: ['Set as Lock Screen', 'Save to Album'],
				success: (res : LongPressActionsSuccessResult) => {
					console.log("res:",res)
					const tap = res.tapIndex
					if (tap === 0) {
						// console.log(index, list[index])
						handleSetLockScreen(host+list[res.index])
					}
					else if (tap === 1) {
						handleSaveToAlbum(host+list[res.index])
					}
				}
			} as LongPressActionsOptions,
		 
		})
	}

	function makeUrl(index : number) : string {
		return `https://store.tmui.design/api_v2/public/random_picture?random=18${index}`
	}

	function randomData() {
		const total = list.length
		for (let i = 0; i < 21; i++) {
			list.push( makeUrl(total + i) )
		}
	}
	


	function onloadata() {
		loading.value = true;
		console.log(`开始查询页:`,pageNum.value)
		api.getImageList({pageNum:pageNum.value,pageSize:pageSize.value}).then((res:resultListType<ImageInfo>|null)=>{
			console.log("getImageList:",res)
	
			if (res != null) {
				const rows = res.rows.map(x=>x.path)
				if (rows != null) {
					list.push(...rows)
				}
				console.log(rows.length);
				console.log(list.length);
				if(res.total != null){
					totalPage.value = Math.ceil(res.total / pageSize.value)
				}
			}
			
			// console.log("totalPage:",totalPage.value)
			
			
			
			loading.value = false
			// uni.stopPullDownRefresh()
		})
		// uni.showLoading({ title: 'Loading...', mask: true })
		// setTimeout(() => {
		// 	randomData()
		// 	loading.value = false
		// 	uni.hideLoading()
		// 	uni.stopPullDownRefresh()
		// }, 800)
	}
	function init(){
		list.length=0;
		pageNum.value=1;
		onloadata()
	}
	onLoad(() => {
		// randomData()
		init()
	})

	//滚动条滚动到底部
	onReachBottom(() => {
		
		if (loading.value) {
			return;
		}
		console.log("到底了:",totalPage.value,pageNum.value)
		if(totalPage.value>pageNum.value){
			pageNum.value=pageNum.value + 1;
			onloadata()
		}
		
	})
	 
	
</script>
<style lang="scss">


</style>