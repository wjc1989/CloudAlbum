<template>
	<!-- #ifdef APP -->
	<scroll-view style="flex:1">
	<!-- #endif -->
		<view class="px-8">
			<x-waterfall :list-count="list.length" :column="3">
				<x-waterfall-item v-for="(item,index) in list" :order="index" :key="index">
					<template v-slot:default="col">
						<view class="pa-1" :style="{ borderRadius:'6px', backgroundColor:bgColorOfView }">
							<image @click="viewImage(index)" style="width:100%;height:120px"
								:src="makeUrl(index)"></image>
						</view>
					</template>
				</x-waterfall-item>
			</x-waterfall>
		</view>

	<!-- #ifdef APP -->
	</scroll-view>
	<!-- #endif -->
 
</template>

<script lang="uts" setup>
	import { xStore } from "@/uni_modules/tmx-ui/index.uts"
	
	const list=reactive([] as UTSJSONObject[]);
	
	const loading=ref(false);
	
	function makeUrl(index : number) : string {
		return `https://store.tmui.design/api_v2/public/random_picture?random=18${index}`
	}

	function randomData() {
		const total = list.length
		for (let i = 0; i < 21; i++) {
			list.push({url:makeUrl(total + i)})
		}
	}


	function onloadata() { 
		loading.value = true
		uni.showLoading({ title: 'Loading...', mask: true })
		setTimeout(() => { 
			randomData()
			loading.value = false
			uni.hideLoading()
			uni.stopPullDownRefresh()
		}, 800)
	}

	onLoad(()=>{
		randomData()
	})
	
	//滚动条滚动到底部
	onReachBottom(()=>{
		if (loading.value) {
			return;
		} 
		onloadata()
	})
	//下拉刷新
	onPullDownRefresh(()=>{
		list.length=0;
		onloadata();
	})
	
	const bgColorOfView=computed(()=>{return xStore.xConfig.dark == 'dark' ? xStore.xConfig.sheetDarkColor : 'white'})
	const textColorOfView=computed(()=>{return xStore.xConfig.dark == 'dark' ? 'white' : '#333333'})
	const images = computed<string[]>(()=>{
		return list.map(x=>x['url'] as string) 
	})
// 顶部追加（仅 Android 需要的导入）
/* #ifdef APP-ANDROID */
import WallpaperManager from 'android.app.WallpaperManager'
import Build from 'android.os.Build'
import BitmapFactory from 'android.graphics.BitmapFactory'
import UTSAndroid from 'io.dcloud.uts.UTSAndroid'
import Rect from 'android.graphics.Rect'
/* #endif */

// 替换原来的方法：
function handleSetLockScreen(url: string) {
  /* #ifdef APP-ANDROID */
  uni.showLoading({ title: 'Setting...', mask: true })
  uni.downloadFile({
    url,
    success: (res: DownloadFileSuccess) => {
        if (res.statusCode !== 200 || res.tempFilePath == null || res.tempFilePath.length == 0) {
        uni.hideLoading()
        uni.showModal({
          title: 'Failed',
          content: 'Download error: ' + res.statusCode,
          showCancel: false
        })
        return
      }

      try {
        const ctx = UTSAndroid.getAppContext()
        const wm = WallpaperManager.getInstance(ctx)

        // 读取位图
        const bmp = BitmapFactory.decodeFile(res.tempFilePath)
        if (bmp == null) {
          throw new Error('Decode bitmap failed')
        }

        // Android 7.0+ 支持只设置锁屏
        if (Build.VERSION.SDK_INT >= 24) {
            // 需要：import Rect from 'android.graphics.Rect'
            const crop = new Rect(0, 0, bmp.getWidth(), bmp.getHeight())
            wm.setBitmap(bmp, crop, true, WallpaperManager.FLAG_LOCK)   // ✅

			uni.hideLoading()
			uni.showToast({ title: 'Lock screen set', icon: 'success' })
        } else {
          // 降级：只能设置系统壁纸
          wm.setBitmap(bmp)
          uni.hideLoading()
          uni.showModal({
            title: 'Set as Wallpaper',
            content: 'This Android version cannot set lock screen only; system wallpaper has been set.',
            showCancel: false
          })
        }

        // 释放位图内存
          try { bmp.recycle() } catch (_) {}
      } catch (e) {
        uni.hideLoading()
        uni.showModal({
          title: 'Failed',
          content: '' + e,
          showCancel: false
        })
      }
    },
    fail: (err) => {
      uni.hideLoading()
      uni.showModal({ title: 'Failed', content: '' + err, showCancel: false })
    }
  })
  /* #endif */

  /* #ifndef APP-ANDROID */
  uni.showModal({
    title: 'Not Supported',
    content:
      'iOS/H5/小程序不允许应用直接设置锁屏。\n请先保存到相册，再在系统设置中设为锁屏壁纸。',
    showCancel: false
  })
  /* #endif */
}

	
	function handleSaveToAlbum(url: string) {
		setTimeout(()=> {
			uni.showLoading({
				title:"Saving...",
				mask:true
			})
		}, 300);
		uni.downloadFile({
		  url,
		  success: (res: DownloadFileSuccess) => {
			if (res.statusCode !== 200) {
			  uni.hideLoading()
			  uni.showModal({ title: 'Failed', content: 'HTTP ' + res.statusCode, showCancel: false })
			  return
			}
			const temp = res.tempFilePath
			if (temp == null || temp.length === 0) {
			  uni.hideLoading()
			  uni.showModal({ title: 'Failed', content: 'tempFilePath is empty', showCancel: false })
			  return
			}
			uni.saveImageToPhotosAlbum({
			  filePath: temp,
			  success: () => {
				uni.hideLoading()
				uni.showToast({ title: 'Saved to Photos', icon: 'success' })
			  },
			  fail: (err) => {
				uni.hideLoading()
				uni.showModal({ title: 'Failed', content: '' + err, showCancel: false })
			  }
			})
		  },
		  fail: (e) => {
			uni.hideLoading()
			uni.showModal({ title: 'Failed', content: '' + e, showCancel: false })
		  }
		})
	}
	 function viewImage(index : number) {
		const actions = ({
			itemList: ['Set as Lock Screen', 'Save to Album'],
			success: (res : LongPressActionsSuccessResult) => {
				const tap = res.tapIndex
				if (tap === 0) {
					console.log(index,images.value[index])
					handleSetLockScreen(images.value[index])
				}
				else if (tap === 1){
					handleSaveToAlbum(images.value[index])
				} 
			}
		} as LongPressActionsOptions)
	 
		uni.previewImage({
			current:index,
			urls: images.value,
			longPressActions: actions
		})
	 }
</script>
<style lang="scss">
 
 
</style>
