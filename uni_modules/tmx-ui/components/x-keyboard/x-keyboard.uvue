<script lang="ts">
	import { getDefaultColor } from "../../core/util/xCoreColorUtil.uts"
	import { xConfig } from "../../config/xConfig.uts"
	import { checkIsCssUnit,getUnit } from "../../core/util/xCoreUtil.uts"
	/**
	 * @name 密码键盘 xKeyboard
	 * @description 密码键盘，如果你只是要单纯的数字键盘见x-keyboard-number
	 * @page /pages/index/keyboard
	 * @category 表单组件
	 * @constant 平台兼容
	 *	| H5 | andriod | IOS | 小程序 | UTS | UNIAPP-X SDK | version |
		| --- | --- | --- | --- | --- | --- | --- |
		| ☑ | ☑️ | ☑️ | ☑️ | ☑️ | 4.44+ | 1.1.9 |
	 */
	export default {
		data() {
			return {
				show: false,
				nowValue: "",
				model: 'abc' as 'number' | 'abc',
				abcList: [
					['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],
					['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'],
					['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'del'],
					['123', '空格', '确认'],
				],
				numList: [
					['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],
					['#', '/', ':', ';', '(', ')', '^', '*', '+'],
					['-', '=', '\\', '|', '~', '$', '&', '.', ',', 'del'],
					['abc', '%', '?', '!', '{', '}', '确认'],
				],
				isShift: false,
				tid: 0
			}
		},
		emits: [
			/**
			* 值变化时触发
			* @param {string} value - 当前值
			*/
			'change',
			/**
			 * 变量控制打开状态
			 * 等同v-model:model-show
			 */
			'update:modelShow',
			/**
			* 确认时触发
			* @param {string} value - 当前值
			*/
			'confirm',
			/**
			 * 关闭取消时触发
			 * @param {string} value - 当前值
			 */
			'cancel',
			'update:modelValue'
		],
		props: {
			/**
			 * 当前输入的值
			 */
			modelValue: {
				type: String,
				default: ""
			},
			/**
			 * 最大长度
			 */
			maxLen: {
				type: Number,
				default: 9
			},
			/**
			 * 当前打开的状态。
			 * 等同v-model:model-show
			 */
			modelShow: {
				type: Boolean,
				default: false
			},
			/**
			 * 顶部标题,默认：安全键盘请放心输入
			 */
			title: {
				type: String,
				default: ""
			},
			/**
			 * 主按钮色，空值取全局主题
			 */
			color: {
				type: String,
				default: ""
			},
			/**
			 * 按钮背景
			 */
			btnColor: {
				type: String,
				default: 'white'
			},
			/**
			 * 键盘背景
			 */
			bgColor: {
				type: String,
				default: 'info'
			},
			/**
			 * 文字颜色
			 */
			fontColor: {
				type: String,
				default: '#3b3b3b'
			},
			/**
			 * 点击确认是否保持键盘不收起
			 */
			hold:{
				type:Boolean,
				default:false
			}
		},
		computed: {
			_hold():boolean{
				return this.hold;
			},
			_color() : string {
				if (this.color == '') return getDefaultColor(xConfig.color)
				return getDefaultColor(this.color)
			},
			_btnColor() : string {
				if (xConfig.dark == 'dark') return xConfig.inputDarkColor
				return getDefaultColor(this.btnColor)
			},
			_btnBorderColor() : string {
				if (xConfig.dark == 'dark') return xConfig.borderDarkColor
				return "#f5f5f5"
			},
			_bgColor() : string {
				return getDefaultColor(this.bgColor)
			},
			_fontColor() : string {
				if (xConfig.dark == 'dark') return "#ffffff"
				return getDefaultColor(this.fontColor)
			},
			_title() : string {
				if(this.title=='') return this!.i18n.t('tmui4x.keyboard.placeholder')
				return this.title
			}
		},
		watch: {
			modelValue(newvalue : string) {
				if (newvalue == this.nowValue) return;
				this.nowValue = newvalue
			},
			modelShow(newValue : boolean) {
				if (newValue == this.show) return;
				this.show = newValue
			}
		},
		beforeCreate() {
			this.nowValue = this.modelValue;

		},
		mounted() {
			this.nowValue = this.modelValue
			let t = this;
			if (this.modelShow) {
				this.tid = setTimeout(function () {
					t.show = t.modelShow
				}, 200);
			}
		},
		beforeUnmount() {
			clearTimeout(this.tid)
		},
		methods: {
			getFontSize(k:string):string{
				return checkIsCssUnit(k,xConfig.unit)
			},
			openShow() {
				this.show = true;
				/**
				 * 变量控制打开状态
				 * 等同v-model:model-show
				 */
				this.$emit('update:modelShow', true)
			},

			onCancel() {
				/**
				 * 关闭取消时触发
				 */
				this.$emit('cancel', this.nowValue);
			},
			onClose(){
				this.$emit('update:modelShow', false)
			},
			itemClick(value : string) {
				let value_convaer = value
				if (value == 'abc') {
					this.model = 'abc'
					return;
				} else if (value == '123') {
					this.model = 'number'
					return;
				} else if (value == 'shift') {
					this.isShift = !this.isShift
					return;
				} else if (value == 'del') {
					this.del()
					return;
				} else if (value == '确认') {
					this.ok()
					return;
				} else if (value == '空格') {
					value_convaer = " "
				}
				if (this.isShift) {
					value_convaer = value_convaer.toLocaleUpperCase()
				}

				let isMaxvalu = this.nowValue.split('').length >= this.maxLen;
				if (isMaxvalu) {
					uni.showToast({ title: '最多输入' + this.maxLen.toString() + '个字符', icon: 'error' })
					return;
				}

				this.nowValue = this.nowValue + value_convaer;
				/**
				 * 等同v-model
				 */
				this.$emit('update:modelValue', this.nowValue);
				/**
				 * 值变化时触发
				 * @paramt {string} value
				 */
				this.$emit('change', this.nowValue);
			},
			ok() {
				/**
				 * 点击确认时触发
				 */
				this.$emit('confirm', this.nowValue);
				if(!this._hold){
					this.show = false;
					this.$emit('update:modelShow', false)
				}
			},
			del() {
				if (this.nowValue.split('').length == 0) return;
				let stp = this.nowValue.split('');
				stp = stp.slice(0, stp.length - 1)
				this.nowValue = stp.join("")
				/**
				 * 等同v-model
				 */
				this.$emit('update:modelValue', this.nowValue);
				/**
				 * 值变化时触发
				 * @paramt {string} value
				 */
				this.$emit('change', this.nowValue);
			},
			getFontColor(value : string) : string {
				if (value == "确认") return 'white'
				if (value == 'del') return this._color
				if (value == 'shift' && this.isShift) return this._color
				return this._fontColor
			}
		},
	}
</script>
<template>
	<view @click="openShow">

		<!-- 
		 @slot 插槽,默认触发打开选择器。你的默认布局可以放置在这里。
		 @prop {boolean} show - 控制打开关闭状态
		 -->
		<slot></slot>
	</view>
	<x-drawer @close="onClose" :widthCoverCenter="true" :disabled-scroll="true" :bgColor="_bgColor" size="auto" overflayBgColor="rgba(0,0,0,0)" :title="title"
		@cancel="onCancel" v-model:show="show" :show-close="true">
		<template v-slot:title>
			<view style="height: 44px;display: flex;justify-content: center;align-items: center;flex-direction: row;">
				 <text :style="{fontSize:nowValue.split('').length>0?getFontSize('16'):getFontSize('12'),color:_fontColor}">{{nowValue.split('').length>0?nowValue:_title}}</text>
			</view>
		</template>
		<template v-slot:default>
			<view v-if="model=='abc'" class="xKeyboardNumber">
				<view class="xKeyboardLeft">
					<view v-for="(item,index) in abcList"  :key="index" class="xKeyboardLeftLine">
						<view @click="itemClick(item2)" 
						v-for="(item2,index2) in item" 
						:key="index2"
						class="xKeyboardItem" :hover-start-time="20" :hover-stay-time="250"
						hover-class="xKeyboardHover" 
						:style="{
							backgroundColor:item2=='确认'?_color:_btnColor,
							flex:item2=='空格'?'2':'1',
							border:`1px solid ${_btnBorderColor}`
						}">
							<text v-if="item2!='shift'&&item2!=='del'" :style="{color:getFontColor(item2)}"
								class="xKeyboardText">
								
								{{(item2=='确认'?i18n!.t('tmui4x.keyboard.confirm'):'')}}
								{{(item2!='确认'&&item2!='空格'?(isShift?item2.toLocaleUpperCase():item2):'')}}
								{{(item2=='空格'?i18n!.t('tmui4x.keyboard.space'):'')}}
								
							</text>
					
							<x-icon v-if="item2=='del'" :color="_color" name="delete-back-2-line"
								font-size="19"></x-icon>
							<x-icon v-if="item2=='shift'" :color="isShift?_color:_fontColor" name="upload-fill"
								font-size="19" ></x-icon>
						</view>
					</view>

				</view>
			</view>
			<view v-if="model=='number'" class="xKeyboardNumber">
				<view class="xKeyboardLeft">
					<view v-for="(item,index) in numList" :key="index" class="xKeyboardLeftLine">
						<view @click="itemClick(item2)" v-for="(item2,index2) in item" :key="index2"
							class="xKeyboardItem" :hover-start-time="20" :hover-stay-time="250"
							hover-class="xKeyboardHover" :style="{
								backgroundColor:item2=='确认'?_color:_btnColor,
								flex:item2=='确认'||item2=='abc'?'2':'1',
								border:`1px solid ${_btnBorderColor}`
							}">

							<text v-if="item2!='shift'&&item2!=='del'" :style="{color:getFontColor(item2)}"
								class="xKeyboardText">
								<!-- #ifdef WEB -->
								{{(item2=='\\'?'\\\\':'')}}
								{{(item2=='确认'?i18n!.t('tmui4x.keyboard.confirm'):'')}}
								{{(item2!='确认'&&item2!='\\'?item2:'')}}
								<!-- #endif -->
								
								<!-- #ifdef APP || MP-WEIXIN -->
								{{(item2=='确认'?i18n!.t('tmui4x.keyboard.confirm'):item2)}}
								<!-- #endif -->
								</text>
							<x-icon v-if="item2=='del'" :color="_color" name="delete-back-2-line"
								font-size="19"></x-icon>
							<x-icon v-if="item2=='shift'" :color="isShift?_color:_fontColor" name="upload-fill"
							font-size="19" ></x-icon>
							
							
						</view>
					</view>

				</view>
			</view>
			<view style="height:12px"></view>
		</template>

	</x-drawer>
</template>
<style scoped>
	.xKeyboardText {
		font-weight: bold;
		font-size: 16px;
	}

	.xKeyboardHover {
		opacity: 0.6;
	}

	.xKeyboardLeftLine {
		display: flex;
		flex-direction: row;
	}

	.xKeyboardNumber {
		display: flex;
		flex-direction: row;
	}

	.xKeyboardLeft {
		flex: 1;
	}

	.xKeyboardItem {
		height: 50px;
		/* background-color: white; */
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		margin-right: 5px;
		margin-bottom: 5px;
		border-radius: 6px;
	}

	.xKeyboardItemNoright {
		margin-right: 0px;
	}

	.xKeyboardRight {
		width: 70px;
		display: flex;
		flex-direction: column;
	}
</style>