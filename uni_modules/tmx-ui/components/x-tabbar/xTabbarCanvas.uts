export default class xTabbarCanvas {
	dom : UniCanvasElement
	ctx : CanvasRenderingContext2D
	tuqiSize : number = 60
	toQiSafeTop : number = 25
	dpr : number = 0;
	loadimgs : Image | null = null;
	callback:()=>void = ()=>{};
	domWidth=0
	domHeight=0
	domOffsetWidth=0
	domOffsetHeight=0
	imgObj = null as any|null;
	constructor(dom : UniCanvasElement,content:CanvasRenderingContext2D, safeHeight : number,w : number,h : number,ofw : number,ofh : number,imamp:any|null) {
		const dpr = uni.getDeviceInfo().devicePixelRatio ?? 1;
		this.domWidth = w;
		this.domHeight = h;
		this.domOffsetWidth = ofw;
		this.domOffsetHeight = ofh;
		this.imgObj = imamp;
		this.dpr = dpr;
		this.dom = dom
		this.ctx = content
	
	}
	addRestoredListener(fun:()=>void){
		this.callback = fun
	}
	/** 绘制背景颜色 */
	fillBgColor(color : string, activeIndex : number) {
		let ctx = this.ctx;
		ctx.globalCompositeOperation = 'source-over'
		ctx.fillStyle = color
		ctx.fillRect(0, activeIndex > -1 ? this.toQiSafeTop : 0, this.domWidth, this.domHeight)
	
	}
	/** 绘制图片背景 */
	fillBgImage(color : string, activeIndex : number) {
		console.log(this.ctx)
		let ctx = this.ctx;
		ctx.fillStyle = color
		ctx.fillRect(0, activeIndex > -1 ? this.toQiSafeTop : 0, this.domWidth, this.domHeight)
	}
	/** 绘制渐变 */
	fillBgLigren(color : string[], activeIndex : number) {
		let ctx = this.ctx;
		ctx.globalCompositeOperation = 'source-over'
		let tuqiheight = activeIndex > -1 ? this.toQiSafeTop : 0;
		let liner = ctx.createLinearGradient(0, (this.domHeight - tuqiheight) / 2, this.domWidth, (this.domHeight - tuqiheight) / 2)
		liner.addColorStop(0, color[1])
		liner.addColorStop(0.5, color[2])
		ctx.fillStyle = liner
		ctx.fillRect(0, tuqiheight, this.domWidth, this.domHeight)
	}
	setTuQi(count : number, activeIndex : number) {
		let t = this;
		if (activeIndex == -1) return;
		let width = this.dom.offsetWidth;

		let height = this.domHeight;
		let itemwidth = width / count;

		let ctx = this.ctx;
		let space = 2
		// ctx.fillStyle = "#ff0000"

		let size = this.tuqiSize + space * 2;
		let r = size / 2;
		ctx.globalCompositeOperation = 'xor'
		// ctx.beginPath()
		if (this.loadimgs != null) {
			this.loadimgs?.remove()
		}
		// #ifdef APP||WEB
		this.loadimgs = new Image(164, 70)
		// #endif
		// #ifdef MP-WEIXIN
		this.loadimgs = this.imgObj
		// #endif
		
		this.loadimgs!.src = '/static/tmui4xLibs/static/tabaarMasker.png'
		let x = itemwidth * (activeIndex + 1) - itemwidth / 2
		
		
		this.loadimgs!.onload = () => {
			
			ctx.save()
			// #ifdef WEB||MP-WEIXIN
			ctx.drawImage(t.loadimgs!, x - 82 / 2, this.toQiSafeTop, 82, 38)
			// #endif
			// #ifdef APP-IOS
			ctx.drawImage(t.loadimgs!, x - 84 / 2, this.toQiSafeTop, 85, 38)
			// #endif
			// #ifdef APP-ANDROID
			ctx.drawImage(t.loadimgs!, x - 85 / 2, this.toQiSafeTop, 86, 38)
			// #endif
			ctx.restore()
			// // #ifdef APP-IOS
			// if (!this.loadimgs.__isLoad) {
			// 	ctx.drawImage(t.loadimgs!, x - 78 / 2, this.toQiSafeTop, 78, 37)
			// 	this.loadimgs.__isLoad = true
			// }
			// // #endif
			// // #ifndef APP-IOS
			// ctx.drawImage(t.loadimgs!, x - 78 / 2, this.toQiSafeTop, 78, 37)
			// // #endif
			
		}

		// ctx.arc(x,this.tuqiSize/2,r,0,Math.PI)
		// ctx.closePath()
		// ctx.fill()



	}
	setTuQiTop(color : string[], count : number, activeIndex : number) {
		let t = this;
		if (this.loadimgs != null) {
			this.loadimgs = null;
		}
		if (activeIndex == -1) return;
		let width = this.dom.offsetWidth;

		let height = this.domHeight;
		let itemwidth = width / count;

		let ctx = this.ctx;

		// ctx.fillStyle = 'red'
		ctx.globalCompositeOperation = 'source-over'
		ctx.clearRect(0, 0, this.domWidth, this.domHeight)
		// ctx.fillRect(0,0,100,25)



		let space = 2
		let size = this.tuqiSize + space * 2;
		let r = size / 2;
		// ctx.globalCompositeOperation = 'source-atop'
		// #ifdef APP||WEB
		this.loadimgs = new Image(152, 50)
		// #endif
		// #ifdef MP-WEIXIN
		this.loadimgs = this.imgObj
		// #endif
		this.loadimgs!.src = '/static/tmui4xLibs/static/tabaarMaskerTop.png'
		let x = itemwidth * (activeIndex + 1) - itemwidth / 2

		this.loadimgs!.onload = () => {
			ctx.save()
			ctx.drawImage(t.loadimgs!, x - 76 / 2, 0, 76, 25)
			ctx.restore()
			ctx.globalCompositeOperation = 'source-atop'
			let liner = ctx.createLinearGradient(0, this.toQiSafeTop / 2, this.domWidth, this.toQiSafeTop / 2)
			liner.addColorStop(0, color[1])
			liner.addColorStop(0.5, color[2])
			ctx.fillStyle = liner
			ctx.fillRect(0, 0, this.domWidth, this.toQiSafeTop)

		}
	}
	destory() {

		this.loadimgs = null;
	}
}