<script lang="ts">
	import { type PropType } from "vue"
	import { getUid } from "../../core/util/xCoreUtil.uts"
	import { getDefaultColor } from "../../core/util/xCoreColorUtil.uts"
	import { checkIsCssUnit } from "../../core/util/xCoreUtil.uts"
	import { xConfig } from "../../config/xConfig.uts"

	/**
	 * @name 消息通知 xMsgNotice
	 * @description 本组件可以通过左右拖拉关闭消息，往左拉，左关闭，右拉右关闭，有阻尼回弹效果，可单独设置。
	 * @page /pages/index/msg-notice
	 * @category 反馈组件
	 * @constant 平台兼容
	 *	| H5 | andriod | IOS | 小程序 | UTS | UNIAPP-X SDK | version |
		| --- | --- | --- | --- | --- | --- | --- |
		| ☑ | ☑️ | ☑️ | ☑️ | ☑️ | 4.44+ | 1.1.9 |
	 */
	export default {
		data() {
			return {
				opened: false,
				isMoveing: false,
				id: ("xMsgNotice-" + getUid()) as string,
				_x: 0,
				_y: 0,
				windowTop: 0,
				posStatus:''
			}
		},
		emits: [
			/**
			 * 组件点击事件
			 */
			'click', 'update:modelValue'],
		props: {
			/**
			 * 打开和关闭状态
			 * 等同v-model,如果使用:modelValue将不受控.
			 */
			modelValue: {
				type: Boolean,
				default: true
			},
			duration: {
				type: Number,
				default: 450
			},
			/**
			 * 当滑动时小于此值，会回弹到原位。而不执行关闭
			 */
			threshold: {
				type: Number,
				default: 64
			},
			/**
			 * 圆角,空值时取全局的drawr圆角。
			 */
			round: {
				type: String,
				default: ""
			},
			/**
			 * 显示位置top,bottom
			 */
			position: {
				type: String as PropType<"top" | "bottom">,
				default: "bottom"
			},
			/**
			 * 距离边界的偏移量
			 */
			offset: {
				type: String,
				default: "12px"
			},
			/**
			 * 背景
			 */
			bgColor: {
				type: String,
				default: "white"
			},
			/**
			 * 暗黑的背景，如果不提供，读取sheetDarkColor
			 */
			darkBgColor: {
				type: String,
				default: ""
			},
			/**
			 * 点击组件是否关闭通知
			 */
			clickClose: {
				type: Boolean,
				default: true
			}
		},
		computed: {
			_round() : string {
				if (this.round == "") return checkIsCssUnit(xConfig.drawerRadius, xConfig.unit)
				return checkIsCssUnit(this.round, xConfig.unit)
			},
			_offset() : object {
				let color = getDefaultColor(this.bgColor);
				if (xConfig.dark == 'dark') {
					if (this.darkBgColor != '') {
						color = getDefaultColor(this.darkBgColor)
					} else {
						color = getDefaultColor(xConfig.sheetDarkColor)
					}
				}
				if (this.position == 'top') {
					let top = checkIsCssUnit(this.offset, xConfig.unit);
					// #ifdef WEB
					top = `calc(${top} + ${this.windowTop}px)`
					// #endif
					return {
						top: top,
						borderRadius: this._round,
						backgroundColor: color
					}
				}
				return {
					bottom: checkIsCssUnit(this.offset, xConfig.unit),
					borderRadius: this._round,
					backgroundColor: color
				}
			},
		},
		mounted() {
			this.opened = this.modelValue
			// #ifdef WEB
			this.windowTop = uni.getWindowInfo().windowTop
			// #endif
			this.$nextTick(() => {
				this.setProperty()
			})
		},
		watch: {
			modelValue(newValue : boolean) {
				if (this.opened == newValue) return;
				this.opened = newValue;
				this.setProperty();
			}
		},
		methods: {
			onClick() {
				/**
				 * 组件点击事件
				 */
				this.$emit('click')
				if (this.clickClose) {
					this.opened = false;
					/**
					 * 等同v-model,
					 * 在使用时，要选同步关闭，再同步打开这样循环，
					 * 类似于ref方法on,off方式。
					 */
					this.$emit("update:modelValue", this.opened)
					this.setProperty();
				}
			},
			setProperty() {
				let node = uni.getElementById(this.id) as UniElement
				node.style.setProperty("transition-duration", this.duration.toString() + 'ms')
				if (this.opened) {
					node.style.setProperty("transform", `scale(1) translate(0%,0%)`)
					node.style.setProperty("opacity", `1`)
				} else {
					
					if(this.position=='left'||this.posStatus=='right'){
						node.style.setProperty("transform", `scale(0.64) translate(100%,0%)`)
					}else if(this.position=='top'){
						node.style.setProperty("transform", `scale(0.64) translate(0%,-100%)`)
					}else if(this.position=='bottom'){
						node.style.setProperty("transform", `scale(0.64) translate(0%,100%)`)
					}
					node.style.setProperty("opacity", `0`)
				}
			},
			mStart(evt : TouchEvent) {
				this.isMoveing = true
				let node = uni.getElementById(this.id) as UniElement
				this._x = evt.changedTouches[0].clientX
				this._y = evt.changedTouches[0].clientY
				node.style.setProperty("transition-duration", '0ms')
			},
			mMove(evt : TouchEvent) {
				evt.preventDefault();
				let node = uni.getElementById(this.id) as UniElement
				let x = evt.changedTouches[0].clientX - this._x
				let y = evt.changedTouches[0].clientY - this._y
				let absx = Math.abs(x);
				let absy = Math.abs(y);
				// 竖。
				if(absy>absx){
					let xscale = absy < 10 ? 1 : Math.max(0, 1 - Math.abs(y) / 1000)
					if(this.position=='top'&&y<0){
						node.style.setProperty("transform", `translateY(${y}px)`)
						node.style.setProperty("opacity", xscale)
					}else if(this.position=='bottom'&&y>0){
						node.style.setProperty("transform", `translateY(${y}px)`)
						node.style.setProperty("opacity", xscale)
					}
					
				}else{
					let xscale = absx < 10 ? 1 : Math.max(0, 1 - Math.abs(x) / 1000)
					node.style.setProperty("transform", `translateX(${x}px)`)
					node.style.setProperty("opacity", xscale)
				}
				
				
			},
			mEnd(evt : TouchEvent) {
				this.isMoveing = false
				let node = uni.getElementById(this.id) as UniElement
				let x = evt.changedTouches[0].clientX - this._x
				let y = evt.changedTouches[0].clientY - this._y
				let absx = Math.abs(x);
				let absy = Math.abs(y);
				node.style.setProperty("transition-duration", this.duration.toString() + 'ms')
				
				if (absx > this.threshold || absy > this.threshold) {
					this.opened = false
					
					if(absy>absx){
						if(this.position=='top'&&y<0){
							node.style.setProperty("transform", `scale(0.64) translate(0,-100%)`)
							node.style.setProperty("opacity", `0`);
							this.posStatus = 'top'
						}else if(this.position=='bottom'&&y>0){
							node.style.setProperty("transform", `scale(0.64) translate(0,100%)`)
							node.style.setProperty("opacity", `0`);
							this.posStatus = 'bottom'
						}
						
					}else{
						if (x > 0) {
							node.style.setProperty("transform", `scale(0.64) translate(100%,0)`)
							this.posStatus = 'right'
						} else {
							node.style.setProperty("transform", `scale(0.64) translate(-100%,0)`)
							this.posStatus = 'left'
						}
						node.style.setProperty("opacity", `0`);
					}
					

					/**
					 * 等同v-model,
					 * 在使用时，要选同步关闭，再同步打开这样循环，
					 * 类似于ref方法on,off方式。
					 */
					this.$emit("update:modelValue", this.opened)
				} else {
					node.style.setProperty("transform", `scale(1) translate(0%,0%)`)
					node.style.setProperty("opacity", `1`)
				}
			},
		},
	}
</script>
<template>
	<!-- :style="_styleCustom" -->
	<view :id="id" @click="onClick" @touchstart.stop="mStart" @touchmove.stop="mMove" @touchend="mEnd" :style="_offset"
		class="xMsgNotice">
		<!-- 
		 @slot 默认插槽
		 -->
		<slot></slot>
	</view>
</template>
<style scoped>
	.xMsgNotice {
		position: fixed;
		width: 90%;
		left: 5%;
		min-height: 20rpx;
		transition-duration: 0ms;
		transition-property: transform, opacity;
		transition-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
		transform: scale(0.64) translate(-100%,0%);
		opacity: 0;
		/* #ifndef APP-HARMONY */
		box-shadow: 0 5px 24px rgba(0, 0, 0, 0.06);
		/* #endif */
		z-index: 88;
	}
</style>