<script lang="ts" setup>
	import { type PropType } from "vue"
	import { getUid } from "../../core/util/xCoreUtil.uts"
	import { getDefaultColor } from "../../core/util/xCoreColorUtil.uts"
	import { checkIsCssUnit } from "../../core/util/xCoreUtil.uts"
	import { xConfig } from "../../config/xConfig.uts"
	import { XGRID_ITEM_INFO } from "../../interface.uts"

	/**
	 * @name 宫格 xGrid
	 * @description 内部只可放置x-grid-item。
	 * @page /pages/index/grid
	 * @category 导航组件
	 * @constant 平台兼容
	 *	| H5 | andriod | IOS | 小程序 | UTS | UNIAPP-X SDK | version |
		| --- | --- | --- | --- | --- | --- | --- |
		| ☑ | ☑️ | ☑️ | x | ☑️ | 4.14+ | 1.0.0 |
	 */
	defineOptions({name:"xGrid"})
	const props = defineProps({
			/**
			 * 显示几列
			 */
			col: {
				type: Number,
				default: 3
			},
			/**
			 * 项目高度
			 */
			itemHeight: {
				type: String,
				default: '70'
			},
			/**
			 * 统一设置子组件的背景
			 */
			itemBgColor: {
				type: String,
				default: 'white'
			},
			/**
			 * 整体宫格的背景
			 */
			bgColor: {
				type: String,
				default: 'transparent'
			},
			/**
			 * 整体宫格的背景暗黑，如果为空，读取全局sheetDark
			 */
			darkBgColor: {
				type: String,
				default: 'transparent'
			},
			/**
			 * 整体宽度
			 */
			width: {
				type: String,
				default: 'auto'
			},
			/**
			 * 图标颜色
			 */
			iconColor: {
				type: String,
				default: '#333333'
			},
			/**
			 * 暗黑时图标颜色
			 */
			darkIconColor: {
				type: String,
				default: '#FFFFFF'
			},
			/**
			 * 文字颜色
			 */
			textColor: {
				type: String,
				default: '#888888'
			},
			/**
			 * 文字暗黑颜色
			 */
			textDarkColor: {
				type: String,
				default: ''
			},
			/**
			 * 文字大小
			 */
			fontSize: {
				type: String,
				default: '13'
			},
			/**
			 * 图标大小
			 */
			iconSize: {
				type: String,
				default: '25'
			},
			/**
			 * 是否显示边框。请务必为每个项目配置order
			 */
			showBorder:{
				type:Boolean,
				default:true
			},
			borderColor:{
				type:String,
				default:'#f5f5f5'
			},
			borderDarkColor:{
				type:String,
				default:'#333333'
			},
			/**
			 * 圆角
			 */
			round: {
				type: String,
				default: '0'
			},
		})
	
	const _col = computed(() : number => {
		return props.col
	})
	const _itemHeight = computed(() : string => {
		return checkIsCssUnit(props.itemHeight, xConfig.unit)
	})
	const _width = computed(() : string => {
		return checkIsCssUnit(props.width, xConfig.unit)
	})
	const _itemBgColor = computed(() : string => {
		return getDefaultColor(props.itemBgColor)
	})
	const _bgColor = computed(() : string => {
		if (xConfig.dark == 'dark') {
			if (props.darkBgColor != "") return getDefaultColor(props.darkBgColor)
			return getDefaultColor(xConfig.sheetDarkColor)
		}
		return getDefaultColor(props.bgColor)
	})
	const _itemGloablStyle = computed(() : XGRID_ITEM_INFO =>{
		return {
			iconColor: getDefaultColor(props.iconColor),
			iconSize: checkIsCssUnit(props.iconSize, xConfig.unit),
			fontColor: getDefaultColor(props.textColor),
			fontDarkColor: getDefaultColor(props.textDarkColor),
			fontSize: checkIsCssUnit(props.fontSize, xConfig.unit),
			darkIconColor: getDefaultColor(props.darkIconColor),
			
		} as XGRID_ITEM_INFO
	})
	const _round = computed(():string => checkIsCssUnit(props.round,xConfig.unit))
	provide("xGridCol",_col)
	provide("xGridHeight",_itemHeight)
	provide("xGridItemBgColor",_itemBgColor)
	provide("xGridItemGlobalProptype",_itemGloablStyle)
	const _borderColor = computed(():string => {
		if (xConfig.dark == 'dark') {
			if (props.borderDarkColor != "") return getDefaultColor(props.borderDarkColor)
			return getDefaultColor(xConfig.inputDarkColor)
		}
		return getDefaultColor(props.borderColor)
	})
	const _showBorder = computed(():boolean => props.showBorder)
	provide("showBorder",_showBorder)
	provide("borderColor",_borderColor)

</script>
<template>
	<view class="xGrid" :style="{
		width:_width,
		backgroundColor:_bgColor,
		border:`${_showBorder?('1px solid '+_borderColor):'none'}`,
		borderRadius:_round
	}">
		<!-- 
		 @slot 插槽内只可放置x-grid-item
		 -->
		<slot></slot>
	</view>
</template>
<style scoped>
	.xGrid {
		display: flex;
		flex-direction: row;
		align-items: flex-start;
		justify-content: flex-start;
		flex-wrap: wrap;
	}
</style>