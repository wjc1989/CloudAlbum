import { Shape } from './shape.uts';
import { CanvasRotateCenter, IShapeOptional, ShapeSetAttrType } from '../interface.uts';
import { ICanvas } from '@/uni_modules/tmx-ui/core/canvas/ICanvas.uts';
export class IRect extends Shape {
	override type = 'IRect'
	constructor(config : IShapeOptional,canvas:ICanvas) {
		super(config,canvas);
	}

	setRadius(value : number) : IRect {
		this.radius = value;
		this.needsUpdate = true;
		return this;
	}



	override draw(ctx : CanvasRenderingContext2D) {
		if (this.visible == false) return;
		super.draw(ctx);

		ctx.beginPath();
		if (this.radius > 0) {
			let radiuss = Math.min(this.radius, this.width / 2, this.height / 2);
			const radius = Math.max(radiuss, 0)
			ctx.moveTo(this.x + radius, this.y);
			ctx.lineTo(this.x + this.width - radius, this.y);
			ctx.arcTo(this.x + this.width, this.y, this.x + this.width, this.y + radius, radius);
			ctx.lineTo(this.x + this.width, this.y + this.height - radius);
			ctx.arcTo(this.x + this.width, this.y + this.height, this.x + this.width - radius, this.y + this.height, radius);
			ctx.lineTo(this.x + radius, this.y + this.height);
			ctx.arcTo(this.x, this.y + this.height, this.x, this.y + this.height - radius, radius);
			ctx.lineTo(this.x, this.y + radius);
			ctx.arcTo(this.x, this.y, this.x + radius, this.y, radius);
		} else {
			ctx.beginPath();
			ctx.rect(this.x, this.y, this.width, this.height);
		}
		ctx.closePath();
		if (this.fill != "") {
			ctx.fill();
		}
		if (this.stroke != "") {
			ctx.stroke();
		}
		ctx.restore()
	}
}